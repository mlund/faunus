$schema: http://json-schema.org/schema#
properties:

    temperature: {type: number}

    mcloop:
        type: object
        properties:
            macro: {type: integer}
            micro: {type: integer}
        required: [macro, micro]
        additionalProperties: false

    random:
        type: object
        properties:
            seed:
                anyOf:
                    - {type: string, enum: [fixed, hardware]}
                    - {type: array, items: {type: integer}}
        required: [seed]
        additionalProperties: false

    geometry:
        type: object
        properties:
            type:
                type: string
                enum: [cuboid, slit, sphere, cylinder, hexagonal]
            radius: {type: number, description: Radius of sphere, cylinder, or hexagon}
            length:
                description: Length(s) of cuboid, slit, cylinder, or hexagon
                anyOf:
                    - {type: number}
                    - {type: array, items: {type: number}, minItems: 3, maxItems: 3}
        required: [type]
        additionalProperties: false
        allOf:
            - if:
                  properties: {type: {const: "cuboid"}}
              then:
                  required: [length]
            - if:
                  properties: {type: {const: "slit"}}
              then:
                  required: [length]
            - if:
                  properties: {type: {const: "sphere"}}
              then:
                  required: [radius]
            - if:
                  properties: {type: {const: "cylinder"}}
              then:
                  required: [radius, length]
            - if:
                  properties: {type: {const: "hexagonal"}}
              then:
                  required: [radius, length]

    atomlist:
        type: array
        items:
            type: object
            additionalProperties:
                type: object
                additionalProperties: false
                properties:
                    activity: {type: number, default: 0.0}
                    alphax: {type: number, default: 0.0}
                    dp: {type: number, default: 0.0}
                    dprot: {type: number, default: 0.0, description: "Rotational displacement parameter"}
                    eps: {type: number, default: 0.0}
                    implicit: {type: boolean, default: false, description: "True if atom is implicit"}
                    mu:
                        items: {type: number}
                        type: array
                        minItems: 3
                        maxItems: 3
                        default: [0,0,0]
                        description: Dipole moment vector (eÅ)
                    mulen: {type: number, description: "Dipole moment scalar (eÅ)"}
                    mw: {type: number, default: 1.0, description: "Molecular weight (g/mol)"}
                    pactivity: {type: number, default: 0.0}
                    q: {type: number, default: 0.0, description: "Valency (e)"}
                    r: {type: number, default: 0.0}
                    sigma: {type: number, default: 0.0, description: "Diameter (Å)"}
                    tension: {type: number, default: 0.0, description: "Surface tension (kJ/mol/Å²)"}
                    tfe: {type: number, default: 0.0, description: "Transfer free energy (kJ/mol/Å²/M)"}

    moleculelist:
        type: array
        items:
            type: object
            additionalProperties:
                type: object
                additionalProperties: false
                properties:
                    activity: {type: number, default: 0.0, description: Chemical activity for grand canonical MC (mol/l)}
                    atomic: {type: boolean, default: false, description: True if collection of atomic species, salt etc.}
                    atoms: {items: {type: string}, type: array, description: Array of atom names; required if `atomic=true`}
                    bondlist: {items: {type: object}, type: array, description: List of _internal_ bonds (harmonic, dihedrals etc.)}
                    compressible:
                        type: boolean,
                        default: false,
                        description: If true, molecular internal coordinates are scaled upon volume moves
                    ensphere:
                        type: boolean
                        default: false
                        description: >-
                            Radial rescale of positions to sphere w. radius of average radial distance from
                            COM (stored inn 1st atom which is a dummy)
                    excluded_neighbours:
                        type: integer
                        default: 0
                        description: >-
                            Generate an `exclusionlist` from the bonded interaction: Add all atom pairs which are
                            `excluded_neighbours` or less bonds apart
                    exclusionlist:
                        type: array
                        items: {type: array, items: integer, minItems: 2, maxItems: 2}
                        description: List of _internal_ atom pairs which nonbonded interactions are excluded
                    insdir:
                        items: {type: number}
                        type: array
                        minItems: 3
                        maxItems: 3
                        default: [1,1,1]
                        description: Insert directions are scaled by this
                    insoffset:
                        items: {type: number}
                        type: array
                        minItems: 3
                        maxItems: 3
                        default: [0,0,0]
                        description: Shifts mass center after insertion
                    keeppos: {type: boolean, default: false, description: Keep original positions of `structure`}
                    keepcharges: {type: boolean, default: true, description: Keep original charges of `structure` (aam/pqr files)}
                    rigid: {type: boolean, default: false, description: Set to true for rigid molecules. Affects energy evaluation}
                    rotate: {type: boolean, default: true, description: Rotate structure upon insertion?}
                    structure:
                        description: Structure file or direct information; required if `atomic=false`
                        anyOf:
                            - type: string
                              pattern: "(.*?)\\.(pqr|aam|xyz)$"
                            - type: array
                              items: {type: object}
                            - type: object
                              properties:
                                  fasta: {type: string}
                                  k: {type: number}
                                  req: {type: number}
                              additionalProperties: false
                    to_disk:
                        type: boolean
                        default: false
                        description: Save initial structure to `moleculename-initial.pqr`; for molecular groups only
                    traj:
                        type: string
                        pattern: "(.*?)\\.(pqr)$"
                        description: Read conformations from PQR trajectory (`structure` will be ignored)
                    trajcenter: {type: boolean, default: false, description: Move CM of conformations to the origin assuming whole molecules}
                    trajweight:
                        type: string
                        description: One-column file with relative weights for each conformation. Must match frames in `traj` file

    energy:
        type: array
        items:
            type: object
            properties:
                confine:
                    description: "Geometrical confinement"
                    type: object
                    properties:
                        com: {type: boolean}
                        high:
                            items: {type: number}
                            type: array
                        low:
                            items: {type: number}
                            type: array
                        k: {type: [integer, string]}
                        molecules:
                            items: {type: string}
                            type: array
                        origo:
                            items: {type: number}
                            type: array
                            minItems: 3
                            maxItems: 3
                        radius: {type: number}
                        scale: {type: boolean}
                        type: {type: string, enum: [sphere, cylinder, cuboid]}
                    required: [k, molecules, type]
                    additionalProperties: false
                    allOf:
                        - if:
                              properties: {type: {const: "sphere"}}
                          then:
                              required: [radius]
                        - if:
                              properties: {type: {const: "cylinder"}}
                          then:
                              required: [radius]
                        - if:
                              properties: {type: {const: "cuboid"}}
                          then:
                              required: [high, low]

    moves:
        type: array
        items:
            type: object
            properties:
                moltransrot:
                    description: "Molecular translation and rotation"
                    properties:
                        dp: {type: number}
                        dprot: {type: number}
                        molecule: {type: string}
                        repeat: {type: [integer, string]}
                        dir:
                            items: {type: number}
                            type: array
                            minItems: 3
                            maxItems: 3
                        dirrot:
                            items: {type: number}
                            type: array
                            minItems: 3
                            maxItems: 3
                    required: [dp, dprot, molecule]
                    additionalProperties: false
                    type: object

                transrot:
                    description: "Atomic translation and rotation"
                    properties:
                        dp: {type: number}
                        dprot: {type: number}
                        molecule: {type: string}
                        repeat: {type: [integer, string]}
                        dir:
                            items: {type: number}
                            type: array
                            minItems: 3
                            maxItems: 3
                        dirrot:
                            items: {type: number}
                            type: array
                            minItems: 3
                            maxItems: 3
                    required: [molecule]
                    additionalProperties: false
                    type: object

                volume:
                    properties:
                        dV: {type: number}
                        method:
                            type: string
                            enum: [xy, isotropic, isochoric]
                        repeat: {type: integer}
                    required: [dV]
                    additionalProperties: false
                    type: object

                crankshaft:
                    properties:
                        dprot: {type: number}
                        molecule: {type: string}
                        joint_max: {type: integer}
                        repeat: {type: integer}
                    required: [dprot, molecule]
                    additionalProperties: false
                    type: object

                cluster:
                    properties:
                        dir:
                            items: {type: number}
                            type: array
                            minItems: 3
                            maxItems: 3
                        dirrot:
                            items: {type: number}
                            type: array
                            minItems: 3
                            maxItems: 3
                        dp: {type: number}
                        dprot: {type: number}
                        molecules:
                            items: {type: string}
                            type: array
                        satellites:
                            items: {type: string}
                            type: array
                        spread: {type: boolean}
                        threshold: {type: number}
                        repeat: {type: integer}
                    required: [dp, dprot, molecules, threshold]
                    additionalProperties: false
                    type: object
         
                pivot:
                    properties:
                        dprot: {type: [number]}
                        molecule: {type: string}
                        skiplarge: {type: boolean}
                        repeat: {type: [integer, string]}
                    required: [dprot, molecule]
                    additionalProperties: false
                    type: object

                rcmc:
                    properties:
                        repeat: {type: integer}
                    additionalProperties: false
                    type: object
         
    analysis:
        type: array
        items:
            type: object
            properties:

                atomrdf:
                    description: "Atom-atom radial distribution function"
                    properties:
                        dr: {type: number, description: "Binning resolution along r (Å)"}
                        file: {type: string, description: "Output file"}
                        name1: {type: string}
                        name2: {type: string}
                        dim: {type: integer, minimum: 1, maximum: 3, default: 3}
                        nstep: {type: integer}
                        nskip: {type: integer, default: 0}
                    required: [dr, file, name1, name2, nstep]
                    additionalProperties: false
                    type: object

                density:
                    properties:
                        nstep: {type: integer}
                        nskip: {type: integer, default: 0}
                        required: [nstep]
                        additionalProperties: false
                        type: object

                polymershape:
                    properties:
                        molecules:
                            items: {type: string}
                            type: array
                        nstep: {type: integer}
                    required: [molecules, nstep]
                    type: object

                reactioncoordinate:
                    type: object
                    properties:
                        index: {type: integer, description: Atom index, atom id or group index}
                        resolution: {type: number, description: "Resolution along the coordinate (Å)", default: 0.5}
                        file: {type: string, description: Output file as a function of steps}
                        nstep: {type: integer}
                        nskip: {type: integer}
                        type: {type: string, enum: [atom, molecule, system], description: Reaction coordinate type}
                    required: [file, nstep, type]
                    allOf:
                        - if:
                              properties: {type: {const: "atom"}}
                          then:
                              properties:
                                  property: {type: string, description: Atomic property to sample, enum: [x,y,z,q,R,N]}
                              required: [property, index]
                        - if:
                              properties: {type: {const: "molecule"}}
                          then:
                              properties:
                                  indexes: {type: array, items: {type: integer}}
                                  property:
                                      type: string
                                      enum: [angle, com_x, com_y,com_z,confid,end2end,Rg,mu_x,mu_y,mu_z,mu,muangle,N,Q,
                                      atomatom, cmcm, cmcm_z, mindist, "L/R", Rinner]
                                      description: Molecular property to sample
                              required: [property]
                        - if:
                              properties: {type: {const: "system"}}
                          then:
                              properties:
                                  indexes: {type: array, items: {type: integer}}
                                  property:
                                      type: string
                                      enum: [Q, V, Lx, Ly, Lz, height, radius, N]
                                      description: System property to sample
                              required: [property]

                sanity:
                    properties:
                        nstep: {type: integer}
                        nskip: {type: integer, default: 0}
                    required: [nstep]
                    additionalProperties: false
                    type: object

                savestate:
                    description: "Save particle positions to file"
                    properties:
                        file: {type: string, pattern: "(.*?)\\.(aam|pqr|state|ubj|gro|xyz|json)$"}
                    required: [file]
                    additionalProperties: false
                    type: object

                sliceddensity:
                    properties:
                        atoms:
                            items: {type: string}
                            type: array
                        dz: {type: number, default: 0.1}
                        file: {type: string}
                        nstep: {type: integer}
                        nskip: {type: integer, default: 0}
                        atomcom: {type: string}
                    required: [atoms, file, nstep]
                    additionalProperties: false
                    type: object

                systemenergy:
                    properties:
                        file: {type: string}
                        nstep: {type: integer}
                        nskip: {type: integer, default: 0}
                    required: [file, nstep]
                    additionalProperties: false
                    type: object

                xtcfile:
                    description: "Write Gromacs XTC trajectory"
                    properties:
                        file: {type: string}
                        nstep: {type: integer}
                        nskip: {type: integer, default: 0}
                        molecules:
                            items: {type: string}
                            type: array
                    required: [file, nstep]
                    additionalProperties: false
                    type: object
                    # yason.py cluster.yml | jq .analysis | genson | yason.py

